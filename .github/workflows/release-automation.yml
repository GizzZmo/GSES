---
name: Release Automation & Changelog Generation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # Validate release
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.86.0"

      - name: Install Sui CLI
        run: |
          cargo install --locked --git https://github.com/MystenLabs/sui.git --tag "testnet-v1.48.1" sui
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Validate Build
        run: |
          echo "Validating build for release..."
          sui move build --path .

      - name: Run Full Test Suite
        run: |
          echo "Running full test suite..."
          sui move test --path .

      - name: Validate Version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            version="${{ github.event.inputs.version }}"
          else
            version="${{ github.ref_name }}"
          fi
          
          echo "Validating version: $version"
          if [[ "$version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚úÖ Version format is valid: $version"
          else
            echo "‚ùå Invalid version format: $version"
            exit 1
          fi

  # Generate changelog
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Changelog
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            version="${{ github.event.inputs.version }}"
          else
            version="${{ github.ref_name }}"
          fi
          
          echo "# Changelog for $version" > CHANGELOG-$version.md
          echo "Generated on: $(date)" >> CHANGELOG-$version.md
          echo "" >> CHANGELOG-$version.md
          
          # Get commits since last tag
          last_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$last_tag" ]; then
            echo "## Changes since $last_tag" >> CHANGELOG-$version.md
            echo "" >> CHANGELOG-$version.md
            git log --oneline "$last_tag"..HEAD | while read commit; do
              echo "- $commit" >> CHANGELOG-$version.md
            done
          else
            echo "## All commits" >> CHANGELOG-$version.md
            echo "" >> CHANGELOG-$version.md
            git log --oneline | head -20 | while read commit; do
              echo "- $commit" >> CHANGELOG-$version.md
            done
          fi
          
          echo "" >> CHANGELOG-$version.md
          echo "## Files Changed" >> CHANGELOG-$version.md
          echo "" >> CHANGELOG-$version.md
          
          # List changed files
          if [ -n "$last_tag" ]; then
            git diff --name-only "$last_tag"..HEAD | while read file; do
              echo "- $file" >> CHANGELOG-$version.md
            done
          fi

      - name: Upload Changelog
        uses: actions/upload-artifact@v3
        with:
          name: changelog-${{ github.sha }}
          path: CHANGELOG-*.md
          retention-days: 90

  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate-release, generate-changelog]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Changelog
        uses: actions/download-artifact@v3
        with:
          name: changelog-${{ github.sha }}

      - name: Create GitHub Release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const version = context.ref.replace('refs/tags/', '');
            
            // Read changelog if it exists
            let changelogContent = '';
            try {
              const changelogFiles = fs.readdirSync('.').filter(f => f.startsWith('CHANGELOG-'));
              if (changelogFiles.length > 0) {
                changelogContent = fs.readFileSync(changelogFiles[0], 'utf8');
              }
            } catch (error) {
              console.log('No changelog found, using default content');
              changelogContent = `Release ${version}\n\nAutomatically generated release.`;
            }
            
            // Create the release
            try {
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: version,
                name: `Release ${version}`,
                body: changelogContent,
                draft: false,
                prerelease: version.includes('alpha') || version.includes('beta') || version.includes('rc')
              });
              
              console.log(`‚úÖ Release created: ${release.data.html_url}`);
            } catch (error) {
              console.log('‚ùå Failed to create release:', error.message);
              throw error;
            }

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: create-release
    if: always() && needs.create-release.result == 'success'

    steps:
      - name: Notify Success
        run: |
          echo "üéâ Release completed successfully!"
          echo "Version: ${{ github.ref_name }}"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo ""
          echo "Next steps:"
          echo "- Update documentation if needed"
          echo "- Announce the release to the community"
          echo "- Monitor for any issues"