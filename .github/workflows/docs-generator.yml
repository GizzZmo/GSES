---
name: Documentation Generator & Publisher

on:
  push:
    branches: [main]
    paths:
      - '**.md'
      - '**.move'
      - 'Move.toml'
  pull_request:
    branches: [main]
    paths:
      - '**.md'
      - '**.move'
      - 'Move.toml'
  workflow_dispatch:

jobs:
  # Generate Move documentation
  generate-move-docs:
    name: Generate Move Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.86.0"

      - name: Install Sui CLI
        run: |
          cargo install --locked --git https://github.com/MystenLabs/sui.git --tag "testnet-v1.48.1" sui
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Generate Move Module Documentation
        run: |
          mkdir -p generated-docs
          echo "# Move Module Documentation" > generated-docs/move-modules.md
          echo "Generated on: $(date)" >> generated-docs/move-modules.md
          echo "" >> generated-docs/move-modules.md

          # List all Move modules
          echo "## Available Modules" >> generated-docs/move-modules.md
          find . -name "*.move" -not -path "./build/*" | while read file; do
            module_name=$(basename "$file" .move)
            echo "- **$module_name** (\`$file\`)" >> generated-docs/move-modules.md
          done
          echo "" >> generated-docs/move-modules.md

          # Extract module documentation from comments
          echo "## Module Descriptions" >> generated-docs/move-modules.md
          find . -name "*.move" -not -path "./build/*" | while read file; do
            echo "### $(basename "$file" .move)" >> generated-docs/move-modules.md
            echo "" >> generated-docs/move-modules.md
            
            # Extract comments and module info
            head -20 "$file" | grep -E "^//|^module" | while read line; do
              echo "$line" >> generated-docs/move-modules.md
            done
            echo "" >> generated-docs/move-modules.md
          done

      - name: Generate Project Structure Documentation
        run: |
          echo "# Project Structure" > generated-docs/project-structure.md
          echo "Generated on: $(date)" >> generated-docs/project-structure.md
          echo "" >> generated-docs/project-structure.md
          
          echo "## Directory Structure" >> generated-docs/project-structure.md
          echo "\`\`\`" >> generated-docs/project-structure.md
          tree -I 'target|build|node_modules|.git' . || ls -la >> generated-docs/project-structure.md
          echo "\`\`\`" >> generated-docs/project-structure.md

      - name: Validate Documentation Links
        run: |
          echo "# Documentation Validation Report" > generated-docs/validation-report.md
          echo "Generated on: $(date)" >> generated-docs/validation-report.md
          echo "" >> generated-docs/validation-report.md
          
          # Check for broken internal links
          echo "## Markdown Files" >> generated-docs/validation-report.md
          find . -name "*.md" -not -path "./generated-docs/*" -not -path "./.git/*" | while read file; do
            echo "- \`$file\`" >> generated-docs/validation-report.md
          done

      - name: Upload Generated Documentation
        uses: actions/upload-artifact@v4
        with:
          name: generated-documentation-${{ github.sha }}
          path: generated-docs/
          retention-days: 30

  # Check documentation quality
  check-doc-quality:
    name: Check Documentation Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Documentation Tools
        run: |
          npm install -g markdownlint-cli

      - name: Check README Quality
        run: |
          echo "Checking README.md quality..."
          if [ -f README.md ]; then
            echo "✅ README.md exists"
            word_count=$(wc -w < README.md)
            echo "Word count: $word_count"
            if [ "$word_count" -gt 100 ]; then
              echo "✅ README has substantial content"
            else
              echo "⚠️ README could use more content"
            fi
          else
            echo "❌ README.md not found"
          fi

      - name: Check Documentation Coverage
        run: |
          echo "Checking documentation coverage..."
          move_files=$(find . -name "*.move" | wc -l)
          documented_moves=$(find . -name "*.move" -exec grep -l "//" {} + | wc -l)
          
          echo "Move files: $move_files"
          echo "Documented Move files: $documented_moves"
          
          if [ "$move_files" -gt 0 ]; then
            coverage=$((documented_moves * 100 / move_files))
            echo "Documentation coverage: ${coverage}%"
          fi

  # Publish documentation (on main branch)
  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: [generate-move-docs, check-doc-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Download Generated Documentation
        uses: actions/download-artifact@v3
        with:
          name: generated-documentation-${{ github.sha }}
          path: docs-to-publish/

      - name: Prepare Documentation for Publishing
        run: |
          echo "Documentation generated and ready for publishing"
          ls -la docs-to-publish/
          echo "In a real setup, this would deploy to GitHub Pages or a documentation site"